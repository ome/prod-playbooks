# Install NGINX, and prepare the OME (UoD/SLS) prerequisites

- hosts: www
  environment:
      PATH: /usr/local/bin:{{ ansible_env.PATH }}
  pre_tasks:
      - name: Install open-vm-tools if system is a VMware vm
        become: true
        yum:
            name: open-vm-tools
            state: installed
        when: >
            ((ansible_virtualization_type is defined)
            and (ansible_virtualization_type == "VMware"))

      # Two tasks here which could instead use the role at
      # https://github.com/openmicroscopy/ansible-role-lvm-partition/,
      # but that role
      # will change the device name to symlinks rather than
      # existing device ID.
      - name: storage | Resize root LV
        tags: lvm
        become: true
        lvol:
            lv: root
            vg: "{{ lvm_vgname  }}"
            size: "{{ provision_root_lvsize }}"
            shrink: false

      # Grow the filesystem to fill the LV
      - name: storage | Resize root FS
        tags: lvm
        become: true
        filesystem:
            fstype: "{{ filesystem }}"
            dev: /dev/mapper/{{ lvm_vgname }}-root
            resizefs: true

      - name: storage | Resize var_log LV
        tags: lvm
        become: true
        lvol:
            lv: var_log
            vg: "{{ lvm_vgname  }}"
            size: "{{ provision_varlog_lvsize }}"
            shrink: false

      # Grow the filesystem to fill the LV
      - name: storage | Resize var_log FS
        tags: lvm
        become: true
        filesystem:
            fstype: "{{ filesystem }}"
            dev: /dev/mapper/{{ lvm_vgname }}-var_log
            resizefs: yes

  roles:
    # Now OME are using RHEL without Spacewalk,
    # the current best-method of
    # checking `is server deployed in Dundee/SLS`
    # is checking for the SLS nameservers.
      - role: ome.system_monitor_agent
        tags: monitoring
        when: "'10.1.255.216' in ansible_dns.nameservers"

      - role: ome.sudoers
        sudoers_individual_commands:
            - user: "%omedev"
              become: ALL
              command: "NOPASSWD: /usr/local/bin/deploy *"

  post_tasks:

      - name: Check_MK logwatch plugin | check for plugin existence
        tags: monitoring
        stat:
            path: "{{ check_mk_agent_plugin_path }}/mk_logwatch"
        register: check_mk_logwatch_plugin_st

      - name: Check_MK logwatch plugin | activate the plugin
        tags: monitoring
        become: true
        command: >-
          cp "{{ check_mk_agent_plugin_path }}/mk_logwatch"
          /usr/share/check-mk-agent/plugins/
          creates=/usr/share/check-mk-agent/plugins/mk_logwatch
        when: check_mk_logwatch_plugin_st.stat.exists

      - name: Check_MK logwatch plugin | check for default config file
        tags: monitoring
        stat:
            path: "{{ check_mk_agent_config_example_path }}/logwatch.cfg"
        register: check_mk_logwatch_plugin_conf_st

      - name: Check_MK logwatch plugin | copy the default config
        tags: monitoring
        become: true
        command: >-
          cp "{{ check_mk_agent_config_example_path }}/logwatch.cfg"
          "{{ check_mk_agent_config_path }}/logwatch.cfg"
          creates="{{ check_mk_agent_config_path }}/logwatch.cfg"
        when: check_mk_logwatch_plugin_conf_st.stat.exists

  vars:
      # Check_MK (system monitoring) paths
      check_mk_agent_plugin_path: /usr/share/check-mk-agent/available-plugins
      check_mk_agent_config_example_path: "/usr/share\
        /check_mk/agents/cfg_examples"
      check_mk_agent_config_path: /etc/check-mk-agent

      filesystem: "ext4"


- import_playbook: www-deploy.yml
# www-deploy.yml includes www-jekyll.yml
