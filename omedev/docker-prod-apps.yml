---
# Production Docker applications

# May want to change this to a hostgroup
- hosts: ome-dockr-prod1.openmicroscopy.org

  pre_tasks:

    - name: Create Prometheus data directory
      become: true
      file:
        path: "{{ prometheus_docker_data_volume }}"
        owner: "{{ prometheus_docker_user }}"
        group: root
        state: directory
        mode: 0755

    - name: Create Minio data directory
      become: true
      file:
        path: "{{ nfs_minio_data_volume }}"
        owner: root
        group: root
        state: directory
        mode: 0755

    - name: Create Redmine data directory
      become: true
      file:
        path: "{{ redmine_tracker_docker_data_volume }}"
        owner: "{{ redmine_docker_user }}"
        group: "{{ redmine_docker_user }}"
        state: directory
        mode: 0755

  roles:

    # Self monitoring
    - role: ome.prometheus_node

    - role: ome.prometheus
      prometheus_docker_network: monitoring
      # https://prometheus.io/docs/guides/basic-auth/#prometheus-configuration
      prometheus_additional_command_args: >-
        --storage.tsdb.retention.time=5y
        --web.external-url https://$(hostname)/prometheus
        --web.route-prefix=/

      # prometheus_alertmanager_slack_webhook: "secret"
      # prometheus_alertmanager_slack_channel: "#secret"

      # Disable external ports, external access is via a proxy
      prometheus_port: 0
      prometheus_alertmanager_port: 0
      prometheus_blackboxexporter_port: 0

      prometheus_targets:
        - jobname: self-node-exporter
          hosts:
            - "{{ ansible_default_ipv4.address }}"
          port: 9100
        - jobname: self-prometheus
          hosts:
            - localhost
          port: 9090

      prometheus_custom_targets:

        - job_name: node-exporter
          basic_auth:
            username: "{{ scrape_username }}"
            password: "{{ scrape_password }}"
          metrics_path: /metrics/9100
          scheme: https
          static_configs:
          - targets: "{{ monitored_node_exporter_hosts }}"

        - job_name: omero-web
          basic_auth:
            username: "{{ scrape_username }}"
            password: "{{ scrape_password }}"
          metrics_path: /django_prometheus/metrics
          scheme: https
          static_configs:
          - targets: "{{ monitored_omero_web_hosts }}"

        - job_name: jmx-blitz
          basic_auth:
            username: "{{ scrape_username }}"
            password: "{{ scrape_password }}"
          metrics_path: /metrics/9180
          scheme: https
          static_configs:
          - targets: "{{ monitored_omero_server_hosts }}"

        - job_name: jmx-indexer
          basic_auth:
            username: "{{ scrape_username }}"
            password: "{{ scrape_password }}"
          metrics_path: /metrics/9181
          scheme: https
          static_configs:
          - targets: "{{ monitored_omero_server_hosts }}"

        - job_name: jmx-pixeldata
          basic_auth:
            username: "{{ scrape_username }}"
            password: "{{ scrape_password }}"
          metrics_path: /metrics/9182
          scheme: https
          static_configs:
          - targets: "{{ monitored_omero_server_hosts }}"

        - job_name: postgres-exporter
          basic_auth:
            username: "{{ scrape_username }}"
            password: "{{ scrape_password }}"
          metrics_path: /metrics/9187
          scheme: https
          static_configs:
          - targets: "{{ monitored_postgres_hosts }}"

        - job_name: omero-server
          basic_auth:
            username: "{{ scrape_username }}"
            password: "{{ scrape_password }}"
          metrics_path: /metrics/9449
          scheme: https
          static_configs:
          - targets: "{{ monitored_omero_server_hosts }}"

# Federated metrics from the IDR
# To get all federated metrics so you can decide what to fetch:
# curl -G https://idr.openmicroscopy.org/prometheus/federate --data-urlencode 'match[]={__name__=~".+"}'

        - job_name: federate-{{ idr_internal_1 }}
          honor_labels: true
          metrics_path: /prometheus/federate
          params:
            'match[]':
              # TODO: Decide what metrics to fetch
              - '{job="node-exporter"}'
              - '{job="omero-server"}'
          scheme: https
          static_configs:
          - targets:
            - "{{ idr_internal_1 }}.openmicroscopy.org"
            labels:
              prometheussrc: "{{ idr_internal_1 }}"

        - job_name: federate-{{ idr_internal_2 }}
          honor_labels: true
          metrics_path: /prometheus/federate
          params:
            'match[]':
              # TODO: Decide what metrics to fetch
              - '{job="node-exporter"}'
              - '{job="omero-server"}'
          scheme: https
          static_configs:
          - targets:
            - "{{ idr_internal_2 }}.openmicroscopy.org"
            labels:
              prometheussrc: "{{ idr_internal_2 }}"

        - job_name: federate-idr-production
          honor_labels: true
          metrics_path: /prometheus/federate
          params:
            'match[]':
              # TODO: Decide what metrics to fetch
              - '{job="node-exporter"}'
              - '{job="omero-server"}'
          scheme: https
          static_configs:
          - targets:
            - idr.openmicroscopy.org
            labels:
              prometheussrc: idr-production

        - job_name: federate-idr-analysis
          basic_auth:
            username: "{{ scrape_idr_username }}"
            password: "{{ scrape_idr_password }}"
          honor_labels: true
          metrics_path: /prometheus/federate
          params:
            'match[]':
              # TODO: Decide what metrics to fetch
              - '{__name__="node_cpu"}'
              - '{__name__=~"node_memory.*"}'
              - '{__name__="kube_pod_status_phase"}'
              - '{__name__="container_cpu_user_seconds_total"}'
              - '{__name__="container_memory_rss"}'
          scheme: https
          static_configs:
          - targets:
            - idr-analysis.openmicroscopy.org
            labels:
              prometheussrc: idr-analysis

    # The prometheus role sets the prometheus_internal_ip variable that is
    # used later

    - role: idr.redmine_tracker
      # This role sets the redmine_tracker_internal_ip variable
      # Disable external port, access is via a proxy
      redmine_tracker_port: 0

    - role: ome.ssl_certificate

    - role: ome.nginx_proxy
      # Just for configuration, well run Nginx in Docker
      nginx_proxy_systemd_setup: false

      nginx_proxy_ssl: true
      nginx_proxy_http2: true
      nginx_proxy_ssl_certificate: "{{ ssl_certificate_bundled_path }}"
      nginx_proxy_ssl_certificate_key: "{{ ssl_certificate_key_path }}"
      nginx_proxy_force_ssl: True
      nginx_proxy_conf_http:
        - "client_max_body_size 128m"
      nginx_proxy_sites:
        # Default site
        - nginx_proxy_is_default: true
          nginx_proxy_backends:
            - name: prometheus
              location: /prometheus/
              server: http://prometheus:9090/
              additional:
                - auth_basic Prometheus
                - auth_basic_user_file /etc/nginx/prometheus.htpasswd
            - name: grafana
              location: /grafana/
              server: >-
                http://grafana:3000/
        # idr-redmine (internal direct)
        - nginx_proxy_server_name: idr-redmine-docker.openmicroscopy.org
          nginx_proxy_backends:
            - name: idr-redmine
              location: /
              server: http://redmine:3000/
        # idr-redmine (via external proxy)
        - nginx_proxy_server_name: idr-redmine.openmicroscopy.org
          nginx_proxy_backends:
            - name: idr-redmine
              location: /
              server: http://redmine:3000/

  tasks:

    - name: Run docker grafana
      become: true
      docker_container:
        image: grafana/grafana:7.2.0
        env:
          GF_SERVER_ROOT_URL: '%(protocol)s://%(domain)s:%(http_port)s/grafana/'
          GF_SERVER_SERVE_FROM_SUB_PATH: 'true'
        name: grafana
        networks:
          - name: monitoring
        state: started
        restart_policy: always
        volumes:
          - grafana-data:/var/lib/grafana
      register: _grafana_container

    - name: prometheus htpasswd parent directory
      become: true
      file:
        path: /etc/nginx
        state: directory
        mode: 0755

    - name: prometheus htpasswd file
      become: true
      copy:
        dest: /etc/nginx/prometheus.htpasswd
        # default: admin:monitoring
        content: >-
          {{
            ome_monitoring_prometheus_htpasswd |
            default('admin:$apr1$njrafrtU$19wf/I15zPuSudlM5Y50Z0')
          }}
        mode: 0644

    # This is a dev Minio server so expose the port directly
    - name: Run docker minio dev server
      become: true
      docker_container:
        image: minio/minio:RELEASE.2020-10-18T21-54-12Z
        command: gateway nas /data
        env:
          MINIO_ACCESS_KEY: "{{ ome_miniodev_access_key | default('minio') }}"
          MINIO_SECRET_KEY: "{{ ome_miniodev_secret_key | default('minio123') }}"
        name: miniodev
        state: started
        published_ports:
          - '9000:9000'
        restart_policy: always
        volumes:
          - "{{ nfs_minio_data_volume }}:/data"

    - name: Run docker nginx proxy
      become: true
      docker_container:
        image: library/nginx:{{ nginx_version }}
        name: nginx
        networks:
          - name: monitoring
          - name: redmine
        state: started
        published_ports:
          - '80:80'
          - '443:443'
        restart_policy: always
        volumes:
          - /etc/nginx/conf.d:/etc/nginx/conf.d:ro
          - /etc/nginx/stream-conf.d:/etc/nginx/stream-conf.d:ro
          - /etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
          - /etc/nginx/prometheus.htpasswd:/etc/nginx/prometheus.htpasswd:ro
          - /etc/ssl/localcerts:/etc/ssl/localcerts:ro

  vars:

    monitored_node_exporter_hosts: "{{ ome_monitored_node_exporter_hosts | default([]) }}"
    monitored_postgres_hosts: "{{ ome_monitored_postgres_hosts | default([]) }}"
    monitored_omero_server_hosts: "{{ ome_monitored_omero_server_hosts | default([]) }}"
    monitored_omero_web_hosts: "{{ ome_monitored_omero_web_hosts | default([]) }}"

    prometheus_docker_user: 909
    redmine_docker_user: 999

    idr_internal_1: "{{ ome_monitored_idr_internal_1 | default('idr1') }}"
    idr_internal_2: "{{ ome_monitored_idr_internal_2 | default('idr2') }}"

    scrape_username: "{{ ome_monitored_scrape_username | default('monitoring') }}"
    scrape_password: "{{ ome_monitored_scrape_password | default('monitoring') }}"
    scrape_idr_username: "{{ ome_monitored_scrape_idr_username | default('monitoring') }}"
    scrape_idr_password: "{{ ome_monitored_scrape_idr_password | default('monitoring') }}"

    nginx_version: 1.18.0

# The following manual steps are required:
# 1. Login to Grafana with the default admin password
# 2. Set a new password (for ease set it to the same as the prometheus htpasswd)
# 3. Create a new prometheus datasource with url "http://prometheus:9090"
#    (prometheus is the internal docker network container name)
# 4. Create your dashboards
